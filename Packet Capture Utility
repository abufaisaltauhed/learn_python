#cat test.py 
from scapy.all import *
from collections import Counter


Interface = input("Port to capture packets at (ens33) : ")
TypeOfPacket  = input("Type of packet to be captured (L2, L3, IPv4/v6,arp,tcp,udp,icmp,ip(ipv4),ip6(ipv6) etc) :")



## Create a Packet Counter
packet_counts = Counter()

## Define our Custom Action function
def custom_action(packet):
    # Create tuple of Src/Dst in sorted order
#    key = tuple(sorted([getmacbyip(packet[0][1].src), packet[0][1].src, packet[0][1].dst]))
    key = tuple(sorted([getmacbyip(packet[0][1].src),getmacbyip(packet[0][1].src),getmacbyip(packet[0][1].dst)]))
    packet_counts.update([key])
#    return f"Packet #{sum(packet_counts.values())}: {packet[0][1].src} ==> {packet[0][1].dst}"
    return f"SrNo :   #{sum(packet_counts.values())}: srcMac={getmacbyip(packet[0][1].src)}  dstMac={getmacbyip(packet[0][1].dst)}  SrcIP={packet[0][1].src}  DstIP={packet[0][1].dst}"



def handler(packet):
    print(packet.summary())


if __name__ == "__main__":
#    sniff(iface=Interface,filter=TypeOfPacket, prn=handler, store=0) ### THIS is working
#    sniff(iface=Interface,filter=TypeOfPacket, prn=handler, store=0)
    sniff(iface=Interface,filter=TypeOfPacket, prn=custom_action, store=0)

## Print out packet count per A <--> Z address pair
print("\n".join(f"{f'{key[0]} <--> {key[1]}'}: {count}" for key, count in packet_counts.items()))    
print(f"Total Packet Capture :------> # {sum(packet_counts.values())}")
#print("Total packets captured:",Total)
